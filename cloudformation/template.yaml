AWSTemplateFormatVersion: "2010-09-09"
Description: ETL pipeline with S3 trigger and Lambda

Resources:

  ### S3 Bucket for Raw Data ###
  RawDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: etl-pipeline-raw-data-1

  ### S3 Bucket for Cleaned Data ###
  CleanedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "etl-pipeline-cleaned-data-1"

  ### IAM Role for Lambda ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: etl-pipeline-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt RawDataBucket.Arn
                  - !Sub "${RawDataBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !GetAtt CleanedDataBucket.Arn
                  - !Sub "${CleanedDataBucket.Arn}/*"

  ### Lambda Function ###
  ETLLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: etl-pipeline-etl-function
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: lambda_etl.lambda_handler
      Timeout: 60
      Code:
        S3Bucket: aman-lambda-package
        S3Key: lambda-deploy.zip
      Environment:
        Variables:
          CLEAN_BUCKET: !Ref CleanedDataBucket

  ### Lambda Permission for S3 ###
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ETLLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt RawDataBucket.Arn

Outputs:
  BucketName:
    Description: "S3 bucket for raw data"
    Value: !Ref RawDataBucket

  LambdaFunction:
    Description: "ETL Lambda function"
    Value: !Ref ETLLambdaFunction
